#include<bits/stdc++.h>
using namespace std;
int min(int x,int y,int z)
{
    return min(min(x,y),z);
}
int editdistance(string s1,string s2,int n,int m)
{
   
    if(n==0)
    {
       return m; 
    }
    if(m==0)
    {
        return n;
    }
    if(s1[n-1]==s2[m-1])
    {
        return editdistance(s1,s2,n-1,m-1);
    }
    
    return 1+min(editdistance(s1,s2,n,m-1),editdistance(s1,s2,n-1,m),editdistance(s1,s2,n-1,m-1));
}
int main()
{
    string s1,s2;
    cin >>s1>>s2;
     int n=s1.length(),m=s2.length();
    cout <<editdistance(s1,s2,n,m);
}




//more optimised way using dp

#include<bits/stdc++.h>
using namespace std;

int editdistance(string s1,string s2,int n,int m)
{
    int dp[n+1][m+1];
    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=m;j++)
        {
            if(i==0)
            dp[i][j]=j;
            else if(j==0)
            dp[i][j]=i;
            else if(s1[i-1]==s2[j-1])
            dp[i][j]=dp[i-1][j-1];
            else
            dp[i][j]=1+min(min(dp[i][j-1],dp[i-1][j]),dp[i-1][j-1]);
            
        }
    }
    return dp[n][m];
}
int main()
{
    string s1,s2;
    cin >>s1>>s2;
     int n=s1.length(),m=s2.length();
    cout <<editdistance(s1,s2,n,m);
}
